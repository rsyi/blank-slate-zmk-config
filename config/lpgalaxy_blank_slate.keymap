/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DVORAK_BASE 1

#define TBLE_ORTHO   0
// #define TBLE_MIT     0
#define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout =
#ifdef TBLE_DUAL_2U
                       &layout_ortho_4x12_2x2u;
#elif defined(TBLE_MIT)
                       &layout_ortho_4x12_1x2u;
#else
                       &layout_ortho_4x12_all1u;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

// Conditional layer only when we have less thumb keys
//#ifdef TBLE_DUAL_2U
//    cond_layers {
//        compatible = "zmk,conditional-layers";
//	tri {
//	    if-layers = <NUM_L NAV_L>;
//	    then-layer = <SYM_L>;
//        };
//    };
//#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp TAB    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BKSP
&kp LCTRL    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp QUOT
&kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &kp RET
&mo NAV_L  &kp LCTRL  &kp LALT   &kp LGUI    &mo SYM_L      &kp SPACE      &kp BKSP         &mo NUM_L      &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR &trans     &trans     &trans      &trans          &trans       &trans     &kp F9         &kp F10 &kp F11     &kp F12     &trans
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp F5       &kp F6    &kp F7     &kp F8  &trans
&trans     &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)       &bt BT(4)    &trans     &kp F1       &kp F2   &kp F3  &kp F4    &trans
&trans  &trans        &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp N1   &kp N2   &kp N3 &kp N4    &kp N5    &kp N6    &kp N7     &kp N8      &kp N9       &kp N0     &kp BSLH
&trans     &kp TILDE  &kp LBRC   &kp LBKT   &kp LPAR    &trans     &trans     &kp RPAR    &kp RBKT       &kp RBRC       &kp GRAVE     &kp EQUAL
&trans     &trans  &trans &trans &trans    &trans    &trans        &trans     &trans      &kp DLLR       &trans     &trans
&trans  &trans       &trans     &trans      &trans    &trans         &trans     &trans        &trans      &trans &trans &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &kp EXCL   &kp AT   &kp HASH    &kp DLLR     &trans     &trans     &kp PRCNT    &kp CARET       &kp AMPS       &kp STAR     &kp PIPE
&trans     &kp TILDE  &kp LBRC   &kp LBKT   &kp LPAR    &trans     &trans     &kp RPAR    &kp RBKT       &kp RBRC       &kp GRAVE     &kp PLUS
&trans     &trans  &kp N0   &trans      &trans     &trans     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &trans     &trans     &trans        &trans     &trans       &kp DEL    &trans  &trans         &trans  &trans  &trans
            >;
        };



    };
};

